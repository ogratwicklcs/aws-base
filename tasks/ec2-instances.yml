---
- name: "Check if server instance exist and is running... "
  ec2_instance_facts:
    aws_region: "{{ aws_region }}"
    filters:
      "tag:Type": "{{ aws_ec2_type_tag }}"
      instance-state-name: running
  register: ec2_servers_state

- name: "Getting VPC id... "
  ec2_vpc_net_facts:
    aws_region: "{{ aws_region }}"
    filters:
      "tag:Name": "{{ aws_vpc_name }}"
  register: vpc
  when: ec2_servers_state['instances'] |list |count == 0

- name: "Getting vpc subnets id... "
  ec2_vpc_subnet_facts:
    aws_region: "{{ aws_region }}"
    filters:
      vpc-id: "{{ vpc.vpcs[0]['id'] }}"
  register: vpc_subnets
  when: ec2_servers_state['instances'] |list |count == 0

- name: "Getting security group id... "
  ec2_group_facts:
    aws_region: "{{ aws_region }}"
    filters:
      group-name: "{{ item }}"
  loop: [ssh, web, icmp]
  register: group
  when: ec2_servers_state['instances'] |list |count == 0

- name: "server instance creation... "
  ec2:
    aws_region: "{{ aws_region }}"
    key_name: "{{ aws_keypair }}"
    instance_type: "{{ aws_ec2_instance_type }}"
    image: "{{ aws_ec2_ami }}"
    instance_tags:
      Name: "{{ aws_ec2_name_tag }}"
      Type: "{{ aws_ec2_type_tag }}"
    count_tag:
      Name: "{{ aws_ec2_name_tag }}"
      Type: "{{ aws_ec2_type_tag }}"
    exact_count: 2
    group: [ssh, web, icmp]
    vpc_subnet_id: "{{ vpc_subnets['subnets'][0].id }}"
    wait: true
    wait_timeout: 500
    monitoring: no
  when: ec2_servers_state['instances'] |list |count == 0
  register: ec2_servers_create

  #- name: "production.project creation... "
  #  ec2:
  #    aws_region: "{{ aws_region }}"
  #    instance_tags:
  #      Name: "production.project"
  #      Type: "application"
  #      Description: "Application server"
  #    exact_count: 1
  #    count_tag:
  #      Name: Application server
  #      Description: "Application Server"
  #    key_name: "{{ keypair }}"
  #    group_id:
  #      - "{{ group['results'][0]['security_groups'][0].group_id }}"
  #      - "{{ group['results'][1]['security_groups'][0].group_id }}"
  #      - "{{ group['results'][2]['security_groups'][0].group_id }}"
  #    vpc_subnet_id: "{{ vpc_subnets['subnets'][1].id }}"
  #    instance_type: t2.medium
  #    image: "{{ aws_ec2_ami }}"
  #    wait: true
  #    wait_timeout: 500
  #    monitoring: no
  #  when: ec2_production_state['instances'] |list |count == 0
  #  register: ec2_production_create
